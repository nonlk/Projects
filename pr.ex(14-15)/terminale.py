# -*- coding: utf-8 -*-
"""
Created on Thu Nov 25 12:44:10 2021

@author: HP
"""
import pizza, order

class Terminale:
    """Класс Терминал обеспечивает взаимодействие с клиентом."""

    #КОМПАНИЯ = !!!
    cancel = -1
    enter = 0

    def __init__(self):
        """Конструктор класса.

        self.меню: список доступных пицц;
        self.заказ: список заказанных пицц;
        self.отображать_меню: определяет отображение меню
                              равен True: при создании терминала,
                              после отмены или подтверждения заказа.
        """
        # Доступные пиццы
        self.menu = [pizza.Pepperoni(), pizza.Barbecue(), pizza.SeaFood()]
        self.orderr = None
        self.display_menu = True

    def __str__(self):
        """Вернуть строковое представление класса.

        Формат вывода:

        Имя пиццерии, версия программы.
        """
        return "Пиццерия №1 \nДобро пожаловать!"

    def show_menu(self):
        """Показать меню.

        Показать меню следует только при наличии флага self.отображать_меню
        self.отображать_меню устанавливается в False после вывода меню.

        Формат вывода:

        Пиццерия #1
        Добро пожаловать!

        Меню:
        1. Пицца: Пепперони | Цена: 350.00 р.
           Тесто: тонкое Соус: томатный
           Начинка: пепперони, сыр моцарелла
        2. Пицца: Барбекю | Цена: 450.00 р.
           Тесто: тонкое Соус: барбекю
           Начинка: бекон, ветчина, зелень, сыр моцарелла
        3. Пицца: Дары моря | Цена: 550.00 р.
           Тесто: пышное Соус: тар-тар
           Начинка: кальмары, креветки, мидии, сыр моцарелла
        Для выбора укажите цифру через <ENTER>.
        Для отмены заказа введите -1
        Для подтверждения заказа введите 0
        """
        if self.display_menu:
            print("\nМеню: \n1. {} \n2. {} \n3. {}".format(self.menu[0], self.menu[1], self.menu[2]))
            print("Для выбора укажите цифру через <ENTER>.\nДля отмены заказа введите -1 \nДля подтверждения заказа введите 0")
        self.display_menu = False
        
        
    

    def process(self, choice):
        """Обработать действие пользователя.

        Аргументы:
          - пункт_меню (str): выбор пользователя.

        Возможные значения "пункт_меню":
          - -1: отменить заказ;
          -  0: подтвердить заказ; при этом осуществляется
                выставление счета, оплата, а также выполняется заказ;
                после заказ удаляется (= None)
          - 1..len(self.меню): добавление пиццы к добавить_к_заказу;
                               если заказ не создан, его нужно создать.
          - иначе: сообщить о невозможности обработать команду.

        Каждое действие подтверждается выводом на экран, например:
        1
        Пицца Пепперони добавлена!
        2
        Пицца Барбекю добавлена!
        0
        Заказ подтвержен.
        """

        try:
            choice = int(choice)
            if choice == Terminale.cancel:
                self.orderr = None
                print("Заказ отменен.")
                self.display_menu = True
            elif choice == Terminale.enter:
                if self.orderr != None:
                    print("Заказ подтвержден.")
                    print("\n", self.orderr)
                    self.payment()
                    self.orderr.execute()
                    self.orderr = None
                else:
                    self.orderr = None
                    print("Заказ пуст, нам пришлось отменить его.")
                self.display_menu = True
                # Проверьте, что подтверждение вызывается для созданного заказа
                # При возникновении ошибки необходимо вызвать команду
                # отмены заказа
            elif 1 <= choice <= len(self.menu):
                if self.orderr == None:
                    self.orderr = order.order()
                self.orderr.plus(self.menu[choice - 1])
                print("Пицца {} добавлена!".format(self.menu[choice - 1].name))
                self.display_menu = False
                # Если заказ не создан, его нужно предварительно создать
            else:
                # За границей меню передаем управление в обработку исключений
                raise ValueError
        except ValueError:
            print("Не могу распознать команду! Проверьте ввод.")
        except Exception as er:
            print("Во время работы терминала произошла ошибка...", er)

    def calculate(self, money):
        """Вернуть сдачу для 'оплата'.

        Если оплата меньше стоимости заказа, возбудить исключение ValueError.
        """
        ch = money - self.orderr.summa()
        if ch < 0:
            raise ValueError
        else:
            print("Вы внесли {:.2f} р. Сдача: {:.2f} р.".format(money, ch))

    def payment(self):
        """Обработать оплату.

        Эмулирует оплату заказа (клиент вводит сумму с клавиатуры).

        Если сумма оплаты недостаточна (определяет метод рассчитать_сдачу())
        или возникает другая ошибка - исключние передается выше.
        """
        try:
            money = int(input("Введите сумму:"))
            self.calculate(money)
        except Exception:
            self.orderr = None
            self.display_menu = True
            print("Оплата не удалась. Заказ будет отменен.")
            raise

